### ignore and stop ignoring handlers.json

    * git update-index --assume-unchanged <file>
    * git update-index --no-assume-unchanged <file>

### tweet matching
    * From Twitter - The text of the Tweet and some entity fields are considered for matches. Specifically, the text attribute of the Tweet, expanded_url and display_url for links and media, text for hashtags, and screen_name for user mentions are checked for matches.
    * query documents that have an entities.media property
        * db.posts.find({"streamHandler":"Tweet Stream 1", "originalPost.entities.media": { $ne: null }}).sort({$natural:-1}).pretty()

### yahoo finance gotchas
some fields have poorly behaved commas
http://developer.yahoo.com/forum/General-Discussion-at-YDN/Stock-Quote-API-returning-commas-in/1234765072000-6036c128-a7e0-3aa5-9e72-1af1871e1b41

/*
 * Twitter Docs
 *
 *
 * Public streams
 * https://dev.twitter.com/docs/streaming-apis/streams/public
 *
 * POST statuses/filter endpoint
 * https://dev.twitter.com/docs/api/1.1/post/statuses/filter
 * The track, follow, and locations fields should be considered to be combined with an OR operator. track=foo&follow=1234 returns Tweets matching "foo" OR created by user 1234.
 * A phrase may be one or more terms separated by spaces, and a phrase will match if all of the terms in the phrase are present in the Tweet, regardless of order and ignoring case. By this model, you can think of commas as logical ORs, while spaces are equivalent to logical ANDs (e.g. ‘the twitter’ is the AND twitter, and ‘the,twitter’ is the OR twitter).
 *
 * Connecting to a streaming endpoint
 * https://dev.twitter.com/docs/streaming-apis/connecting
 *
 * Processing streaming data
 * https://dev.twitter.com/docs/streaming-apis/processing
 *
 * Streaming API request parameters
 * https://dev.twitter.com/docs/streaming-apis/parameters#delimited
 */


//http://www.gummy-stuff.org/Yahoo-data.htm

//http://finance.yahoo.com/d/quotes.csv?s=
//http://finance.yahoo.com/d/quotes.csv?s=AAPL+MSFT+GOOG&f=snl1d1t1

run tests:
mocha


https://dev.twitter.com/docs/streaming-apis/connecting
https://dev.twitter.com/docs/streaming-apis/processing
https://dev.twitter.com/docs/streaming-apis/parameters#stall_warnings

Stalls

Set a timer, either a 90 second TCP level socket timeout, or a 90 second application level timer on the receipt of new data. If 90 seconds pass with no data received, including newlines, disconnect and reconnect immediately according to the backoff strategies in the next section. The Streaming API will send a keep-alive newline every 30 seconds to prevent your application from timing out the connection. You should wait at least 3 cycles to prevent spurious reconnects in the event of network congestion, local CPU starvation, local GC pauses, etc.

Reconnecting

Once an established connection drops, attempt to reconnect immediately. If the reconnect fails, slow down your reconnect attempts according to the type of error experienced:

Back off linearly for TCP/IP level network errors. These problems are generally temporary and tend to clear quickly. Increase the delay in reconnects by 250ms each attempt, up to 16 seconds.
Back off exponentially for HTTP errors for which reconnecting would be appropriate. Start with a 5 second wait, doubling each attempt, up to 320 seconds.
Back off exponentially for HTTP 420 errors. Start with a 1 minute wait and double each attempt. Note that every HTTP 420 received increases the time you must wait until rate limiting will no longer will be in effect for your account.
Connection churn

Repeatedly opening and closing a connection (churn) wastes server resources. Keep your connections as stable and long-lived as possible.

Avoid mobile (cellular network) connections from mobile devices. WiFi is generally OK.

Delay opening a streaming connection in cases where the user may quit the application quickly.

If your client works in an environment where the connection quality changes over time, attempt to detect flaky connections. When detected, fall back to REST polling until the connection quality improves.

Rate limiting

Clients which do not implement backoff and attempt to reconnect as often as possible will have their connections rate limited for a small number of minutes. Rate limited clients will receive HTTP 420 responses for all connection requests.

Clients which break a connection and then reconnect frequently (to change query parameters, for example) run the risk of being rate limited.

Twitter does not make public the number of connection attempts which will cause a rate limiting to occur, but there is some tolerance for testing and development. A few dozen connection attempts from time to time will not trigger a limit. However, it is essential to stop further connection attempts for a few minutes if a HTTP 420 response is received. If your client is rate limited frequently, it is possible that your IP will be blocked from accessing Twitter for an indeterminate period of time.

Best practices

Test backoff strategies

A good way to test a backoff implementation is to use invalid authorization credentials and examine the reconnect attempts. A good implementation will not get any 420 responses.

Issue alerts for multiple reconnects

If a client reaches its upper threshold of its time between reconnects, it should send you notifications so you can triage the issues affecting your connection.

Handle DNS changes

Test that your client process honors the DNS Time To live (TTL). Some stacks will cache a resolved address for the duration of the process and will not pick up DNS changes within the proscribed TTL. Such aggressive caching will lead to service disruptions on your client as Twitter shifts load between IP addresses.

User Agent

Ensure your User-Agent HTTP header includes the client's version. This will be critical in diagnosing issues on Twitter's end. If your environment precludes setting the User-Agent field, then set an X-User-Agent header.

HTTP Error Codes

Most error codes are returned with a string with additional details. For all codes greater than 200, clients should wait before attempting another connection. See the Connecting section, above.

Status	Text	Description
200	Success	 Self evident.
401	Unauthorized
HTTP authentication failed due to either:

Invalid basic auth credentials, or an invalid OAuth request.
Out-of-sync timestamp in your OAuth request (the response body will indicate this).
Too many incorrect passwords entered or other login rate limiting.
403	Forbidden	 The connecting account is not permitted to access this endpoint.
404	Unknown
There is nothing at this URL, which means the resource does not exist.

406	Not Acceptable
At least one request parameter is invalid. For example, the filter endpoint returns this status if:

The track keyword is too long or too short.
An invalid bounding box is specified.
Neither the track nor follow parameter are specified.
The follow user ID is not valid.
413	Too Long
A parameter list is too long. For example, the filter endpoint returns this status if:

More track values are sent than the user is allowed to use.
More bounding boxes are sent than the user is allowed to use.
More follow user IDs are sent than the user is allowed to follow.
416	Range Unacceptable
For example, an endpoint returns this status if:

A count parameter is specified but the user does not have access to use the count parameter.
A count parameter is specified which is outside of the maximum/minimum allowable values.
420	Rate Limited
The client has connected too frequently. For example, an endpoint returns this status if:

A client makes too many login attempts in a short period of time.
Too many copies of an application attempt to authenticate with the same credentials.
503	Service Unavailable
A streaming server is temporarily overloaded. Attempt to make another connection, keeping in mind the connection attempt rate limiting and possible DNS caching in your client.
